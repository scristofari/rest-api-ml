// Code generated by protoc-gen-go. DO NOT EDIT.
// source: box.proto

package box

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Artifact struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Artifact) Reset()         { *m = Artifact{} }
func (m *Artifact) String() string { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()    {}
func (*Artifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_box_c1db311142376b7c, []int{0}
}
func (m *Artifact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Artifact.Unmarshal(m, b)
}
func (m *Artifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Artifact.Marshal(b, m, deterministic)
}
func (dst *Artifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artifact.Merge(dst, src)
}
func (m *Artifact) XXX_Size() int {
	return xxx_messageInfo_Artifact.Size(m)
}
func (m *Artifact) XXX_DiscardUnknown() {
	xxx_messageInfo_Artifact.DiscardUnknown(m)
}

var xxx_messageInfo_Artifact proto.InternalMessageInfo

func (m *Artifact) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Artifact) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ArtifactRequest struct {
	Tar                  []byte   `protobuf:"bytes,1,opt,name=tar,proto3" json:"tar,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArtifactRequest) Reset()         { *m = ArtifactRequest{} }
func (m *ArtifactRequest) String() string { return proto.CompactTextString(m) }
func (*ArtifactRequest) ProtoMessage()    {}
func (*ArtifactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_box_c1db311142376b7c, []int{1}
}
func (m *ArtifactRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArtifactRequest.Unmarshal(m, b)
}
func (m *ArtifactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArtifactRequest.Marshal(b, m, deterministic)
}
func (dst *ArtifactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArtifactRequest.Merge(dst, src)
}
func (m *ArtifactRequest) XXX_Size() int {
	return xxx_messageInfo_ArtifactRequest.Size(m)
}
func (m *ArtifactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ArtifactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ArtifactRequest proto.InternalMessageInfo

func (m *ArtifactRequest) GetTar() []byte {
	if m != nil {
		return m.Tar
	}
	return nil
}

func init() {
	proto.RegisterType((*Artifact)(nil), "box.Artifact")
	proto.RegisterType((*ArtifactRequest)(nil), "box.ArtifactRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BoxerClient is the client API for Boxer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BoxerClient interface {
	Run(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*Artifact, error)
}

type boxerClient struct {
	cc *grpc.ClientConn
}

func NewBoxerClient(cc *grpc.ClientConn) BoxerClient {
	return &boxerClient{cc}
}

func (c *boxerClient) Run(ctx context.Context, in *ArtifactRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.cc.Invoke(ctx, "/box.Boxer/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoxerServer is the server API for Boxer service.
type BoxerServer interface {
	Run(context.Context, *ArtifactRequest) (*Artifact, error)
}

func RegisterBoxerServer(s *grpc.Server, srv BoxerServer) {
	s.RegisterService(&_Boxer_serviceDesc, srv)
}

func _Boxer_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoxerServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/box.Boxer/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoxerServer).Run(ctx, req.(*ArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Boxer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "box.Boxer",
	HandlerType: (*BoxerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Boxer_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "box.proto",
}

func init() { proto.RegisterFile("box.proto", fileDescriptor_box_c1db311142376b7c) }

var fileDescriptor_box_c1db311142376b7c = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xca, 0xaf, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0xca, 0xaf, 0x50, 0x32, 0xe3, 0xe2, 0x70, 0x2c,
	0x2a, 0xc9, 0x4c, 0x4b, 0x4c, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x29, 0x2d, 0xcd, 0x4c, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0xc4, 0xb8, 0xd8, 0x8a, 0x4b, 0x12, 0x4b, 0x4a,
	0x8b, 0x25, 0x98, 0xc0, 0xa2, 0x50, 0x9e, 0x92, 0x32, 0x17, 0x3f, 0x4c, 0x5f, 0x50, 0x6a, 0x61,
	0x69, 0x6a, 0x71, 0x89, 0x90, 0x00, 0x17, 0x73, 0x49, 0x62, 0x11, 0x58, 0x37, 0x4f, 0x10, 0x88,
	0x69, 0x64, 0xca, 0xc5, 0xea, 0x94, 0x5f, 0x91, 0x5a, 0x24, 0xa4, 0xc3, 0xc5, 0x1c, 0x54, 0x9a,
	0x27, 0x24, 0xa2, 0x07, 0xb2, 0x1d, 0x4d, 0x9f, 0x14, 0x2f, 0x8a, 0xa8, 0x12, 0x43, 0x12, 0x1b,
	0xd8, 0x7d, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0x7e, 0x93, 0x4b, 0xac, 0x00, 0x00,
	0x00,
}
